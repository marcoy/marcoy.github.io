<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Marco Yuen</title>
    <description>Life and Programming</description>
    <link>http://www.marcoyuen.com/</link>
    <atom:link href="http://www.marcoyuen.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 07 Sep 2016 17:30:15 -0400</pubDate>
    <lastBuildDate>Wed, 07 Sep 2016 17:30:15 -0400</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>ArangoDB Performance Peculiarities</title>
        <description>&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_why-arangodb&quot;&gt;Why ArangoDB?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At work, we are looking into incorporating a graph database into our next generation stack.
Graph database fits our business domain and business model very nicely,
and a lot of our queries involve some form travarsal of relationships.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I have previous experience in &lt;a href=&quot;https://neo4j.com/&quot;&gt;Neo4j&lt;/a&gt;, and think it is very good at its job.
On top of that, I think &lt;a href=&quot;https://neo4j.com/developer/cypher-query-language/&quot;&gt;Cypher&lt;/a&gt;, the Neo4j&amp;#8217;s query language, is well designed and intuitive.
However, due to licensing issues for &lt;a href=&quot;https://neo4j.com/&quot;&gt;Neo4j&lt;/a&gt;, the higher-ups do not approve of using Neo4j.
Then my immediate manager finds out about &lt;a href=&quot;https://www.arangodb.com/&quot;&gt;ArangoDB&lt;/a&gt;.
So off I went with my teammate to evaluate &lt;a href=&quot;https://www.arangodb.com/&quot;&gt;ArangoDB&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what-is-arangodb&quot;&gt;What is ArangoDB&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;ArangoDB is a multi-model database.
It supports document, key/value, and graph data models.
Quite honestly, when I first read about the multi-model, I feel skeptical.
Having different models could lead to compromises.
That may mean &lt;a href=&quot;https://www.arangodb.com/&quot;&gt;ArangoDB&lt;/a&gt; is &lt;em&gt;&quot;jack of all trades, master of none&quot;&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_evaluation&quot;&gt;Evaluation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I wrote this post before ArangoDB 3.0.0 came out.
For the following evaluation, I am using version 2.8.9.
The results for 3.0.0 will be posted shortly.
The evaluation was done on a 15-inch MacBook Pro (mid-2014 model);
the test is to determine how long does ArangoDB take to create 50,000 vertices
and 49,999 edges.
The test is very simple, but I discover something peculiar with ArangoDB.
The evaluate code, written in Scala, can be found in this &lt;a href=&quot;https://gist.github.com/marcoy/ec0292fa6687956131f8e339bbace780&quot;&gt;gist&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_the-results&quot;&gt;The Results&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Below are the results for ArangoDB 2.8.9:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code&gt;--&amp;gt; Creating 50000 vertices - graphCreateVertex
Elapsed time: 56748ms
--&amp;gt; Creating 49999 edges - graphCreateEdge
Elapsed time: 57497ms
--&amp;gt; Creating 50000 vertices - createDocument
Elapsed time: 9987ms
--&amp;gt; Creating 49999 edges - createEdge
Elapsed time: 9283ms
--&amp;gt; Creating 50000 vertices - createDocument (batched 100)
Elapsed time: 3520ms
--&amp;gt; Creating 49999 edges - createEdge (batched 100)
Elapsed time: 3942ms&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, the creation times for the vertices and edges go down
from around 57 seconds to around 10 seconds.
With batching enabled, the numbers go down even further.
All in all, the times go down from around 57s to just 4s;
that is a &lt;strong&gt;big&lt;/strong&gt; jump!
What is surprising is the time difference between the different API calls, namely,
&lt;code&gt;graphCreateVertex&lt;/code&gt; vs. &lt;code&gt;createDocument&lt;/code&gt; and &lt;code&gt;graphCreateEdge&lt;/code&gt; vs. &lt;code&gt;createEdge&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As far as I can tell, the difference between &lt;code&gt;graphCreateEdge&lt;/code&gt; and &lt;code&gt;createEdge&lt;/code&gt; is that
the former performs validation;
it makes sure the two vertices are present.
Whereas the latter do not perform such validation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, I cannot really tell the difference between &lt;code&gt;graphCreateVertex&lt;/code&gt; and &lt;code&gt;createDocument&lt;/code&gt;.
At first glance, one may say &lt;code&gt;graphCreateVertex&lt;/code&gt; is for creating a vertex,
and &lt;code&gt;createDocument&lt;/code&gt; is for creating a document.
However, as far as I understand, a vertex in ArangoDB is just a document.
Moreover, the graph created by &lt;code&gt;createDocument&lt;/code&gt; and &lt;code&gt;createEdge&lt;/code&gt;,
works just fine with AQL, the ArangoDB&amp;#8217;s query language.
The outcome seems to be the same,
but &lt;code&gt;createDocument&lt;/code&gt; is significantly faster than &lt;code&gt;graphCreateVertex&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_closing-thoughts&quot;&gt;Closing Thoughts&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Overall ArangoDB is quite capable.
Aside from the few gotchas I mentioned in the previous section,
everything functions as advertised, and the performance is acceptable.
Being able to support different data models in ArangoDB can be convenient.
Though I am only concerned with the graph capabilities.
In this post, I only evaluate the graph creation time.
Another metric I care about is the traversal time.
I have code that measures the traversal time as well,
but I will leave that for a later post.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Tue, 28 Jun 2016 00:00:00 -0400</pubDate>
        <link>http://www.marcoyuen.com/articles/2016/06/28/arangodb-performance-pecularities.html</link>
        <guid isPermaLink="true">http://www.marcoyuen.com/articles/2016/06/28/arangodb-performance-pecularities.html</guid>
        
        <category>arangodb, performance, graph database</category>
        
        
        <category>articles</category>
        
      </item>
    
      <item>
        <title>Streamlining Git Sparse Checkout with git-sparse</title>
        <description>&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_sparse-what&quot;&gt;Sparse What?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sparse checkout is probably not a well used feature in git.
In a nutshell, the feature allows one to checkout only certain subdirectories in a git repository.
For the most part, I don&amp;#8217;t envision people use this feature much.
The only reason why I use the git sparse checkout feature is because of work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At work, we use &lt;a href=&quot;https://en.wikipedia.org/wiki/Apache_Subversion&quot;&gt;Subversion&lt;/a&gt; as the VCS (imagine my horror)&lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnote_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/sup&gt;.
The SVN repository layout follows the standard recommended layout (e.g. &lt;code&gt;trunk&lt;/code&gt;, &lt;code&gt;branches&lt;/code&gt;, and &lt;code&gt;tags&lt;/code&gt;).
There are upwards of 30+ codebases under &lt;code&gt;trunk&lt;/code&gt;, and most of the time I only have to work with a handful
of the codebases.
Since it has been a long time since I use Subversion, I decided to use &lt;code&gt;git svn&lt;/code&gt; rather than vanilla
Subversion.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_normal-sparse-checkout-workflow&quot;&gt;Normal Sparse Checkout Workflow&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The sparse checkout feature is not enabled by default, one needs to enable it first.
So use the following the command to enable sparse checkout&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;&amp;gt;&lt;span style=&quot;color: #19177C&quot;&gt;$ &lt;/span&gt;git config core.sparsecheckout &lt;span style=&quot;color: #008000&quot;&gt;true&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Only enable sparse checkout in the current git repository&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once it is enabled, create a file called &lt;code&gt;sparse-checkout&lt;/code&gt; in &lt;code&gt;$GITDIR/info&lt;/code&gt;.
For the most part, &lt;code&gt;$GITDIR&lt;/code&gt; is &lt;code&gt;.git&lt;/code&gt;, but that is not always the case especially if one uses the
&lt;a href=&quot;https://git-scm.com/docs/git-worktree&quot;&gt;git worktree&lt;/a&gt; feature.
The content of the &lt;code&gt;sparse-checkout&lt;/code&gt; file is where one specifies the subdirectories to checkout in the working
tree.
Then, use the following command to update the working tree, or get rid of the subdirectories you do not want.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;&amp;gt;&lt;span style=&quot;color: #19177C&quot;&gt;$ &lt;/span&gt;git &lt;span style=&quot;color: #008000&quot;&gt;read&lt;/span&gt;-tree -mu HEAD&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;sparse-checkout-steps&quot; class=&quot;paragraph&quot;&gt;
&lt;p&gt;To summarize the steps:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Enable git sparse out&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a file, &lt;code&gt;sparse-checkout&lt;/code&gt;, inside &lt;code&gt;$GITDIR&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Edit and specify the subdirectories in &lt;code&gt;sparse-checkout&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;read-tree&lt;/code&gt; to update the working tree&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see the workflow is quite clunky.
Especially, when I want to checkout a new subdirectory or un-checkout one of the subdirectories in my current
working tree.
I need to navigate to &lt;code&gt;$GITDIR/info/sparse-checkout&lt;/code&gt; and edit its content.
That is quite inconvenient because I use &lt;a href=&quot;https://git-scm.com/docs/git-worktree&quot;&gt;git worktree&lt;/a&gt; a lot, and the &lt;code&gt;$GITDIR&lt;/code&gt; is somewhere else altogether.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_streamlining-the-workflow&quot;&gt;Streamlining the Workflow&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As outlined &lt;a href=&quot;#sparse-checkout-steps&quot;&gt;above&lt;/a&gt;, getting sparse checkout working is clunky but very mechanical.
As most developers do when facing mundane tasks, I decide to automate the steps.
I create a custom git command to make my life easier.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Creating a custom git command is very simple.
Place an executable with name git-&lt;em&gt;&amp;lt;command&amp;gt;&lt;/em&gt; in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The custom command I created is called &lt;code&gt;git-sparse&lt;/code&gt;,
it performs &lt;a href=&quot;#sparse-checkout-steps&quot;&gt;steps 1-3&lt;/a&gt; outlined in the previous section.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using &lt;code&gt;git-sparse&lt;/code&gt; is simple.
Navigate to the git repository, then run &lt;code&gt;git sparse&lt;/code&gt; in the terminal.
The first thing it does is to turn on sparse checkout feature,
then use git to determine the correct location of &lt;code&gt;$GITDIR&lt;/code&gt;,
so &lt;code&gt;git-sparse&lt;/code&gt; works with &lt;a href=&quot;https://git-scm.com/docs/git-worktree&quot;&gt;git worktree&lt;/a&gt;.
Finally, it opens up an editor, so you can immediately start editing the &lt;code&gt;sparse-checkout&lt;/code&gt; file.
The last step which &lt;code&gt;git-sparse&lt;/code&gt; does &lt;strong&gt;not&lt;/strong&gt; do for you is running the &lt;code&gt;read-tree&lt;/code&gt; command.
You can see &lt;code&gt;git-sparse&lt;/code&gt; in action in the following animated GIF.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center;float: right&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/git-sparse.gif&quot; alt=&quot;git sparse&quot; width=&quot;700&quot; height=&quot;500&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_subcommand&quot;&gt;Subcommand&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is a subcommand to &lt;code&gt;git-sparse&lt;/code&gt;, &lt;code&gt;add&lt;/code&gt;.
The &lt;code&gt;add&lt;/code&gt; subcommand is a convenient way to add subdirectories or files to &lt;code&gt;sparse-checkout&lt;/code&gt; file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;&amp;gt;&lt;span style=&quot;color: #19177C&quot;&gt;$ &lt;/span&gt;git sparse add &lt;span style=&quot;color: #19177C&quot;&gt;$subdir1&lt;/span&gt; &lt;span style=&quot;color: #19177C&quot;&gt;$subdir2&lt;/span&gt; &lt;span style=&quot;color: #19177C&quot;&gt;$file1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_implementation&quot;&gt;Implementation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I do not want to dive into details about the implementation in this post,
because I plan on writing a few technical posts about how &lt;code&gt;git-sparse&lt;/code&gt; is implemented.
To keep this short, &lt;code&gt;git-sparse&lt;/code&gt; is written in Haskell.
While it can be easily implemented using Shell scripts or any other scripting languages,
implementing it in Haskell gives me a chance to write more software using a functional programming language,
and I want to get some practice in for Haskell.
I thought about using Clojure, but the startup time will be too slow.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_building-and-installing&quot;&gt;Building and installing&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Haskell &lt;a href=&quot;http://docs.haskellstack.org/en/stable/README/&quot;&gt;stack&lt;/a&gt; is required to build &lt;code&gt;git-sparse&lt;/code&gt;.
Once &lt;a href=&quot;http://docs.haskellstack.org/en/stable/README/&quot;&gt;stack&lt;/a&gt; is installed, clone the &lt;a href=&quot;https://gitlab.com/marcoy/git-sparse&quot;&gt;git-sparse&lt;/a&gt; repository.
At the root of the repository, run &lt;code&gt;stack install&lt;/code&gt;.
Stack will build and install an executable called &lt;code&gt;git-sparse&lt;/code&gt; in &lt;code&gt;$HOME/.local/bin&lt;/code&gt;.
Finally, make sure to add &lt;code&gt;$HOME/.local/bin&lt;/code&gt; to your &lt;code&gt;$PATH&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt;. SVN is not a right tool when coupled with the company development culture
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Tue, 07 Jun 2016 00:00:00 -0400</pubDate>
        <link>http://www.marcoyuen.com/articles/2016/06/07/git-sparse.html</link>
        <guid isPermaLink="true">http://www.marcoyuen.com/articles/2016/06/07/git-sparse.html</guid>
        
        <category>git, haskell</category>
        
        
        <category>articles</category>
        
      </item>
    
      <item>
        <title>Some Updates</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I have been on hiatus for more than two years now.
So I have decided to update the site&amp;#8217;s layout and add some new content.
Since the past two years, a lot have changes.
I have a different job, and I get even more into functional programming.
In addition to Clojure, I get into Haskell, and recently Scala.&lt;/p&gt;
&lt;/div&gt;</description>
        <pubDate>Sun, 05 Jun 2016 00:00:00 -0400</pubDate>
        <link>http://www.marcoyuen.com/articles/2016/06/05/updates.html</link>
        <guid isPermaLink="true">http://www.marcoyuen.com/articles/2016/06/05/updates.html</guid>
        
        
        <category>articles</category>
        
      </item>
    
      <item>
        <title>Compojure restart workflow</title>
        <description>&lt;p&gt;Recently I’ve been reading the excellent &lt;a href=&quot;http://pragprog.com/book/dswdcloj/web-development-with-clojure&quot;&gt;Web Development with
Clojure&lt;/a&gt;. As I’m
following along, I found myself constantly restarting the REPL because of either
a new module or a new function is introduced. The time it takes for the REPL to
restart is long enough that it breaks my
&lt;a href=&quot;http://en.wikipedia.org/wiki/Flow\_(psychology)&quot;&gt;flow&lt;/a&gt;. I don’t know why the
REPL restart time did not bother me as much when I was working on my recent
projects, &lt;a href=&quot;&quot;&gt;Shows&lt;/a&gt; and &lt;a href=&quot;/articles/2014/02/15/bitpub.html&quot;&gt;Bitpub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In any case, a tight feedback loop is essential to REPL-driven development. I
understand there is a famous
&lt;a href=&quot;http://thinkrelevance.com/blog/2013/06/04/clojure-workflow-reloaded&quot;&gt;blog&lt;/a&gt; post
by &lt;a href=&quot;http://stuartsierra.com/&quot;&gt;Stuart Sierra&lt;/a&gt; regarding his workflow, and a
&lt;a href=&quot;https://github.com/zcaudate/vinyasa&quot;&gt;few&lt;/a&gt; &lt;a href=&quot;https://github.com/juxt/jig&quot;&gt;other&lt;/a&gt;
&lt;a href=&quot;https://github.com/stuartsierra/component&quot;&gt;projects&lt;/a&gt; that help with Clojure
workflow. Ultimately, I decided to use Stuart’s idea and
&lt;a href=&quot;https://github.com/clojure/tools.namespace&quot;&gt;tools.namespace&lt;/a&gt; to create a quick
and dirty solution that helps me as I follow along the book.&lt;/p&gt;

&lt;p&gt;Following Stuart’s idea, I have a constructor for the app. It returns a map,
that contains an atom which then holds an instance of the application server,
jetty. But notice that it is private.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn- &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;create-app&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;atom&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The way to start the app is to use the &lt;code&gt;start&lt;/code&gt; function. One way I make it more
convenient for myself, but less portable is the use of &lt;code&gt;intern&lt;/code&gt;. I use &lt;code&gt;intern&lt;/code&gt;
to create a &lt;code&gt;Var&lt;/code&gt; in the &lt;code&gt;user&lt;/code&gt; namespace called &lt;code&gt;app&lt;/code&gt;. The value of the
&lt;code&gt;user/app&lt;/code&gt; is the return value of &lt;code&gt;create-app&lt;/code&gt;, the constructor.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;var-get &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;intern&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;user&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;app&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create-app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;nv&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Integer/parseInt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:server&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;serve&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get-handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;a name=&quot;line-6&quot;&gt;&lt;/a&gt;                   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:port&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;port&lt;/span&gt;
&lt;a name=&quot;line-7&quot;&gt;&lt;/a&gt;                    &lt;span class=&quot;ss&quot;&gt;:init&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;init&lt;/span&gt;
&lt;a name=&quot;line-8&quot;&gt;&lt;/a&gt;                    &lt;span class=&quot;ss&quot;&gt;:auto-reload?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;true&lt;/span&gt;
&lt;a name=&quot;line-9&quot;&gt;&lt;/a&gt;                    &lt;span class=&quot;ss&quot;&gt;:destroy&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;destroy&lt;/span&gt;
&lt;a name=&quot;line-10&quot;&gt;&lt;/a&gt;                    &lt;span class=&quot;ss&quot;&gt;:join&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
&lt;a name=&quot;line-11&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;println &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;You can view the site at http://localhost:&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Reloading is very similar to how it is described in the
&lt;a href=&quot;https://github.com/clojure/tools.namespace#warnings-for-helper-functions&quot;&gt;README&lt;/a&gt;
of &lt;a href=&quot;https://github.com/clojure/tools.namespace&quot;&gt;tools.namespace&lt;/a&gt;. Everytime
&lt;code&gt;restart&lt;/code&gt; is called, it will stop the current application server, refresh all
the namespaces that are changed and start a new application server.
one&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;restart&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;c1&quot;&gt;;; gallery.repl is the module where&lt;/span&gt;
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;c1&quot;&gt;;; start and restart are defined&lt;/span&gt;
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;refresh&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:after&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;gallery.repl/start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now my work flow becomes quite compact and fast. No more restarting the REPL.
Plus, I can experiment in the REPL against the running application.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nv&quot;&gt;user=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;c1&quot;&gt;;; editing...&lt;/span&gt;
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;c1&quot;&gt;;; The start function intern&amp;#39;s app into the user namespace.&lt;/span&gt;
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;c1&quot;&gt;;; So, I can pass it into restart.&lt;/span&gt;
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nv&quot;&gt;user=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;restart&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;a name=&quot;line-6&quot;&gt;&lt;/a&gt;&lt;span class=&quot;c1&quot;&gt;;; more editing...&lt;/span&gt;
&lt;a name=&quot;line-7&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nv&quot;&gt;user=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;restart&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There are quite a few drawbacks to my approach, but, so far, it works quite well
for my use case. If you are developing a proper application from scratch, I
would suggest using either
&lt;a href=&quot;https://github.com/stuartsierra/component&quot;&gt;compojure&lt;/a&gt;, or
&lt;a href=&quot;https://github.com/juxt/jig&quot;&gt;jig&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 11 Mar 2014 00:00:00 -0400</pubDate>
        <link>http://www.marcoyuen.com/articles/2014/03/11/compojure-restart-workflow.html</link>
        <guid isPermaLink="true">http://www.marcoyuen.com/articles/2014/03/11/compojure-restart-workflow.html</guid>
        
        <category>clojure</category>
        
        <category>compojure</category>
        
        
        <category>articles</category>
        
      </item>
    
      <item>
        <title>Introducing bitpub</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/marcoy/bitpub&quot;&gt;Bitpub&lt;/a&gt; was a project I started about two
months ago. One of the main goals of the project is to build something that
utilizes RabbitMQ. In essence, bitpub fetches Bitcoin ticker data from various
sources, and publishes them to a RabbitMQ’s topic exchange. Please read the
&lt;a href=&quot;https://github.com/marcoy/bitpub/blob/master/README.md&quot;&gt;README&lt;/a&gt; of
&lt;a href=&quot;https://github.com/marcoy/bitpub&quot;&gt;Bitpub&lt;/a&gt; on how to run the publisher and
consumer.&lt;/p&gt;

&lt;h4 id=&quot;polling&quot;&gt;Polling&lt;/h4&gt;
&lt;p&gt;The project uses &lt;a href=&quot;https://github.com/clojure/core.async&quot;&gt;core.async&lt;/a&gt; to poll the
sources for ticker data. The supported sources are &lt;a href=&quot;https://campbx.com&quot;&gt;CampBx&lt;/a&gt;,
&lt;a href=&quot;https://www.bitstamp.net&quot;&gt;Bitstamp&lt;/a&gt;, &lt;a href=&quot;http://vircurex.com&quot;&gt;Vircurex&lt;/a&gt;,
&lt;a href=&quot;https://btc-e.com&quot;&gt;BTC-e&lt;/a&gt;, and &lt;a href=&quot;https://vip.btcchina.com&quot;&gt;BTC China&lt;/a&gt;. The logic
of the polling, shown below, will poll a given ticker URL to &lt;code&gt;GET&lt;/code&gt; the market
data. It will place the data returned from the &lt;code&gt;GET&lt;/code&gt; request into the &lt;code&gt;out&lt;/code&gt;
channel. If no process is consuming the &lt;code&gt;out&lt;/code&gt; channel, it will wait for a
specified time and poll the ticker URL again. This ensures the data that a
consumer receives are kept somewhat up-to-date. There is a timeout for the
initial &lt;code&gt;GET&lt;/code&gt; request. If the &lt;code&gt;GET&lt;/code&gt; request timeout has elapsed, it will retry
again. All of these polling logics are performed inside a &lt;code&gt;go&lt;/code&gt; block, which is
similar to
&lt;a href=&quot;https://gobyexample.com/goroutines&quot;&gt;goroutines&lt;/a&gt; in &lt;a href=&quot;http://golang.org/&quot;&gt;Go&lt;/a&gt;. As
a result, the polling is done in a thread pool. So, multiple &lt;em&gt;feeds&lt;/em&gt; can be
constructed, and poll concurrently.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;create-ticker-feed&lt;/span&gt;
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ticker-url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:keys&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;get-timeout&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;async-put-timeout&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;park-time-fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;chan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;go-loop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;time-out&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;as/timeout&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;get-timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;a name=&quot;line-6&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;nv&quot;&gt;ticker-poll&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;http-get&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ticker-url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;a name=&quot;line-7&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;alts!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;time-out&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ticker-poll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])]&lt;/span&gt;
&lt;a name=&quot;line-8&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cond&lt;/span&gt;
&lt;a name=&quot;line-9&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;= &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ticker-poll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;alts!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;as/timeout&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;async-put-timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])]&lt;/span&gt;
&lt;a name=&quot;line-10&quot;&gt;&lt;/a&gt;                              &lt;span class=&quot;c1&quot;&gt;;; If no-one is consuming the out channel, polls&lt;/span&gt;
&lt;a name=&quot;line-11&quot;&gt;&lt;/a&gt;                              &lt;span class=&quot;c1&quot;&gt;;; the url again after some time.&lt;/span&gt;
&lt;a name=&quot;line-12&quot;&gt;&lt;/a&gt;                              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;= &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;a name=&quot;line-13&quot;&gt;&lt;/a&gt;                                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;do&lt;/span&gt;
&lt;a name=&quot;line-14&quot;&gt;&lt;/a&gt;                                  &lt;span class=&quot;c1&quot;&gt;;; park for a little bit before polling again&lt;/span&gt;
&lt;a name=&quot;line-15&quot;&gt;&lt;/a&gt;                                  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;&amp;lt;!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;as/timeout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;park-time-fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;a name=&quot;line-16&quot;&gt;&lt;/a&gt;                                  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;a name=&quot;line-17&quot;&gt;&lt;/a&gt;                                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;a name=&quot;line-18&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;c1&quot;&gt;;; HTTP GET timeout&lt;/span&gt;
&lt;a name=&quot;line-19&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;= &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;time-out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;close!&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;a name=&quot;line-20&quot;&gt;&lt;/a&gt;                             &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;a name=&quot;line-21&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;nv&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There are a few options for &lt;code&gt;create-ticket-feed&lt;/code&gt; function. They are all related
to timings, because different sources have different timing restrictions when
polling. The timing restrictions are set in place, in order to prevent abuse. If
the &lt;code&gt;go&lt;/code&gt; block polls a source too frequently, it may get banned by the source.
The options are:&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;&lt;code&gt;:get-timeout&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;The time it waits for a reply from the GET request before retrying (in ms).&lt;/dd&gt;
  &lt;dt&gt;&lt;code&gt;:async-put-timeout&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;The time it waits for a consumer to consume the value (in ms).&lt;/dd&gt;
  &lt;dt&gt;&lt;code&gt;:park-time-fn&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;A function that returns an integer (in ms). The integer will be used as the
park time before the &lt;code&gt;go&lt;/code&gt; block re-polls the ticker url again. This is dictated by the
source’s timing restriction.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;To create a feed from, say, &lt;a href=&quot;https://campbx.com&quot;&gt;CampBx&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create-ticker-feed&lt;/span&gt;
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;s&quot;&gt;&amp;quot;http://campbx.com/api/xticker.php&amp;quot;&lt;/span&gt;
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;c1&quot;&gt;;; GET request timed out after 30s&lt;/span&gt;
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ss&quot;&gt;:get-timeout&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30000&lt;/span&gt;
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;c1&quot;&gt;;; If no process is consuming the out channel, re-poll&lt;/span&gt;
&lt;a name=&quot;line-6&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ss&quot;&gt;:async-put-timeout&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;
&lt;a name=&quot;line-7&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;c1&quot;&gt;;; Wait at least 1s between each poll&lt;/span&gt;
&lt;a name=&quot;line-8&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;c1&quot;&gt;;; rand-int is to introduce some variance&lt;/span&gt;
&lt;a name=&quot;line-9&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ss&quot;&gt;:park-time-fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+ &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rand-int &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;publishing-feeds&quot;&gt;Publishing feeds&lt;/h4&gt;
&lt;p&gt;The return value for &lt;code&gt;create-ticker-feed&lt;/code&gt; is a channel. From that channel, a
consumer can acquire the market data and then perform whatever action it needs
to perform. In the publisher’s case, whenever it receives any market data, it
will publish the data out to a topic exchange of a RabbitMQ instance.  Actually,
the publisher I implemented does a little bit more. All the data that it
receives from the channel get passed through a function (using
&lt;a href=&quot;http://clojure.github.io/core.async/#clojure.core.async/map&amp;lt;&quot;&gt;mapv&amp;lt;&lt;/a&gt;). The
function is used to clean up the market data. One example for such function is
to transform all the string keys into Clojure &lt;code&gt;keywords&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;subscribing-to-feeds&quot;&gt;Subscribing to feeds&lt;/h4&gt;
&lt;p&gt;As described earilier, the data will be published to a RabbitMQ’s topic
exchange. Each feed will have the routing key of the form &lt;code&gt;ticker.$feedname&lt;/code&gt;.
So, to subscribe to the &lt;a href=&quot;https://campbx.com&quot;&gt;CampBx&lt;/a&gt; feed, you will need to
subscribe to &lt;code&gt;ticker.campbx&lt;/code&gt;. Moreover, if you want to subscribe to all feeds,
then you will need to subscribe to &lt;code&gt;ticker.#&lt;/code&gt;.
&lt;a href=&quot;https://github.com/marcoy/bitpub&quot;&gt;Bitpub&lt;/a&gt; comes a basic consumer the subscribe
to all feeds, and dump all the data out to &lt;code&gt;STDOUT&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;final-words&quot;&gt;Final words&lt;/h4&gt;
&lt;p&gt;One of the other reasons why I started
&lt;a href=&quot;https://github.com/marcoy/bitpub&quot;&gt;bitpub&lt;/a&gt;, besides learning about RabbitMQ, was
to build a notification system for Bitcoin prices at different exchanges. So,
users can get notifications when the prices of Bitcoin rise above or fall below
some thresholds defined by the users. Another usage of bitpub is to allow
trading bot to get the market data and make decision on how to trade.&lt;/p&gt;

&lt;p&gt;Unfortunately, life and work get in the way, so I haven’t started on the rest of
the components of the notification system. And, that’s why I haven’t written
anything about &lt;a href=&quot;https://github.com/marcoy/bitpub&quot;&gt;bitpub&lt;/a&gt; until months later.
Anyway, try it and play around with it.&lt;/p&gt;
</description>
        <pubDate>Sat, 15 Feb 2014 00:00:00 -0500</pubDate>
        <link>http://www.marcoyuen.com/articles/2014/02/15/bitpub.html</link>
        <guid isPermaLink="true">http://www.marcoyuen.com/articles/2014/02/15/bitpub.html</guid>
        
        <category>clojure</category>
        
        <category>bitcoin</category>
        
        <category>ticker</category>
        
        <category>marketdata</category>
        
        
        <category>articles</category>
        
      </item>
    
      <item>
        <title>Eight-Queens Puzzle</title>
        <description>&lt;p&gt;The eight queens puzzle is about placing eight queens on a 8x8 chess board such
that none of the queens share the same row, column, and diagonal. In fact there
are more than one ways to place eight queens on a chess board without violating
the rule. The puzzle can be generalized into a &lt;code&gt;n&lt;/code&gt;-queens puzzle where the player
is tasked to place &lt;code&gt;n&lt;/code&gt; queens on a &lt;code&gt;n&lt;/code&gt;x&lt;code&gt;n&lt;/code&gt; chess board.&lt;/p&gt;

&lt;p&gt;This post is about my attempt to solve the &lt;code&gt;n&lt;/code&gt;-queens puzzle using
&lt;a href=&quot;http://clojure.org/&quot;&gt;Clojure&lt;/a&gt;. The classic approach to solve the puzzle is to
use a technique called backtracking. In backtracking, the entire solution space
for the puzzle is searched until all or some of the solutions are found. In The
&lt;a href=&quot;http://www.amazon.com/Algorithm-Design-Manual-Steve-Skiena/dp/0387948600&quot;&gt;Algorithm Design Manual&lt;/a&gt;,
Steve Skiena outlines a general form of the backtracking algorithm.&lt;/p&gt;

&lt;p&gt;The idea behind the backtracking algorithm is to progressively generate
candidates that will eventually make up a solution to the problem. In the
context of eight-queens puzzle, the algorithm will place one queen at a time
until all eight queens are placed. Each newly placed queen will satisfy the rule
of the puzzle—no two queens share the same row, column, and diagonal.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;backtrack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;partial-soln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;= &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;count &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;partial-soln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;partial-soln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;candidates&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gen-candidates&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;partial-soln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mapcat &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;backtrack&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;conj &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;partial-soln&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;candidates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;a name=&quot;line-6&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;line-7&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;n-queens&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;a name=&quot;line-8&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;backtrack&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In the above snippet, two functions are defined. The &lt;code&gt;backtrack&lt;/code&gt; function
first checks the length of the partial solution. The partial solution contains
placements of queens on the chess board. When there are placements for &lt;code&gt;n&lt;/code&gt; queens,
we know we have a single complete solution.  However, if there are less than &lt;code&gt;n&lt;/code&gt;
queens placed, the algorithm will find all the suitable placements for the next
queen while making sure the rule of the puzzle is enforced. That’s what
&lt;code&gt;gen-candidates&lt;/code&gt; does; it returns all the valid placements in the next row for a
queen. For each of the valid placements, the &lt;code&gt;backtrack&lt;/code&gt; function will append
the placement to its partial solution, then it continues to find the next valid
placement for the next queen by calling itself.  Put it another way, the
&lt;code&gt;backtrack&lt;/code&gt; function places a queen in one of the placements returned by
&lt;code&gt;gen-candidates&lt;/code&gt;, so it is one step/queen closer to finding a complete solution
of placing &lt;code&gt;n&lt;/code&gt; queens on a &lt;code&gt;n&lt;/code&gt;x&lt;code&gt;n&lt;/code&gt; chess board. The crucial bit is that
&lt;code&gt;gen-candidates&lt;/code&gt; must return proper set of candidates.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;invalid?&lt;/span&gt;
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;newq-row&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;newq-col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cond&lt;/span&gt;
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;= &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;newq-row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;true&lt;/span&gt;
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;= &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;col&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;newq-col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;true&lt;/span&gt;
&lt;a name=&quot;line-6&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;= &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Math/abs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;- &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;newq-row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;a name=&quot;line-7&quot;&gt;&lt;/a&gt;       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Math/abs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;- &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;col&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;newq-col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;true&lt;/span&gt;
&lt;a name=&quot;line-8&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ss&quot;&gt;:else&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;a name=&quot;line-9&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;line-10&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;validPlacements&lt;/span&gt;
&lt;a name=&quot;line-11&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;placements&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;new-pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;a name=&quot;line-12&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;partial &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;invalid?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;new-pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;placements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;a name=&quot;line-13&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;a name=&quot;line-14&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;nv&quot;&gt;true&lt;/span&gt;
&lt;a name=&quot;line-15&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;nv&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;a name=&quot;line-16&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;line-17&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;gen-candidates&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;placements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;a name=&quot;line-18&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;last-row&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;last-col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;placements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;a name=&quot;line-19&quot;&gt;&lt;/a&gt;                              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;a name=&quot;line-20&quot;&gt;&lt;/a&gt;                              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;last &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;placements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;a name=&quot;line-21&quot;&gt;&lt;/a&gt;         &lt;span class=&quot;nv&quot;&gt;row&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;inc &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;last-row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;a name=&quot;line-22&quot;&gt;&lt;/a&gt;         &lt;span class=&quot;nv&quot;&gt;cols&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;
&lt;a name=&quot;line-23&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;validPlacements&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;placements&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The idea of &lt;code&gt;gen-candidates&lt;/code&gt; is to first generate all possible placements for
the next queen, then filter out the placements that will violate the placement
rule—no two queens share the same row, column, and diagonal. The two
functions, &lt;code&gt;validPlacements&lt;/code&gt; and &lt;code&gt;invalid?&lt;/code&gt; are used to enforce the rule of the
puzzle so no queens can attack each other.&lt;/p&gt;

&lt;p&gt;In total there are 92 possible ways to place eights queen on a chess board. You
can find all the solutions returned by calling:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nv&quot;&gt;user=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;count &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;n-queens&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;mi&quot;&gt;92&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Due to readability and space, I will show the solutions for a smaller
chess board. Here are the solutions for the four-queens puzzle:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nv&quot;&gt;user=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;n-queens&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;([(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There are two solutions to place four queens on a 4x4 chess board. The return
value is a list that contains vectors, in this case, there are two. Each vector
holds the placements for the four queens. The placements are represented as
tuples with the first element being the row, and the second element being the
column (both start at 0).&lt;/p&gt;

&lt;p&gt;And finally, here are the solutions for six-queens:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nv&quot;&gt;user=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pprint&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;n-queens&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;([(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There you have it. My attempt at the n-queens puzzle using clojure. I must admit
the performance is not that great, but I think it is a decent start.&lt;/p&gt;
</description>
        <pubDate>Sat, 08 Feb 2014 00:00:00 -0500</pubDate>
        <link>http://www.marcoyuen.com/articles/2014/02/08/nqueens.html</link>
        <guid isPermaLink="true">http://www.marcoyuen.com/articles/2014/02/08/nqueens.html</guid>
        
        <category>clojure</category>
        
        <category>puzzle</category>
        
        
        <category>articles</category>
        
      </item>
    
      <item>
        <title>Merkle Tree</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Merkle_tree&quot;&gt;Merkle Tree&lt;/a&gt; is a tree where the leaf
nodes contain the hashes of some data blocks, and the internal nodes contain
hashes of their children. It provides a quick way to verify data. For example,
in a peer-to-peer network, a peer can use a Merkle Tree or parts of it (explain
later) to quickly verify the data it receives from other peers have not been
tampered with, or the data are not corrupted during the transmission. Borrowing
from wikipedia, below is a picture of what a Merkle Tree looks like.&lt;/p&gt;

&lt;div class=&quot;text-center&quot;&gt;
  &lt;img src=&quot;http://upload.wikimedia.org/wikipedia/commons/thumb/9/95/Hash_Tree.svg/500px-Hash_Tree.svg.png&quot; height=&quot;300&quot; width=&quot;300&quot; alt=&quot;Merkle Tree&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;The data blocks can be anything from a file being split into blocks or a set of
files. From the picture, it is easy to see that only top hash is needed to
verify the data blocks are valid. As a result, the top hash is usually acquired
through a trusted source, for example, inside a
&lt;a href=&quot;http://www.bittorrent.org/beps/bep_0030.html&quot;&gt;*.torrent&lt;/a&gt; file. If any of the
data block is corrupted or altered, the hashes along the path from root to the
corrupted block will be different.&lt;/p&gt;

&lt;p&gt;As mentioned earlier, you can verify the validity a data block without having
the whole Merkle Tree. Referring to the above diagram, say, if you want to
verify if data block &lt;code&gt;1&lt;/code&gt; is valid, you only need &lt;code&gt;Hash 0-1&lt;/code&gt; and &lt;code&gt;Hash 1&lt;/code&gt;, which
you can get from your peers. First, you hash data block &lt;code&gt;1&lt;/code&gt;, which gives you
&lt;code&gt;Hash 0-0&lt;/code&gt;. Second, you combine &lt;code&gt;Hash 0-0&lt;/code&gt; with &lt;code&gt;Hash 0-1&lt;/code&gt; in order to compute
&lt;code&gt;Hash 0&lt;/code&gt;. Then combine &lt;code&gt;Hash 0&lt;/code&gt; and &lt;code&gt;Hash 1&lt;/code&gt; to get the root hash. Finally, you
can compare the root hash with the one you acquired through a trusted source. If
they match, that means data block &lt;code&gt;1&lt;/code&gt; is valid. However, if they don’t match, it
could mean either one or a combination of &lt;code&gt;Hash 0-1&lt;/code&gt;, &lt;code&gt;Hash 1&lt;/code&gt; or data block &lt;code&gt;1&lt;/code&gt;
is invalid.&lt;/p&gt;

&lt;h4 id=&quot;hash-function&quot;&gt;Hash Function&lt;/h4&gt;
&lt;p&gt;Since a Merkle Tree is basically a tree of hashes, a hash function is a
crucial component. I’m using &lt;code&gt;SHA-1&lt;/code&gt; as the hash function. You are free to
choose whatever hash function, of course.&lt;/p&gt;

&lt;p&gt;Below is the hash function I’m using in my Merkle Tree implementation. I’m using
the SHA-1 implementation that comes with JAVA. The output of the function is a
hex string. The input can either be a &lt;code&gt;String&lt;/code&gt;, or &lt;code&gt;byte[]&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hashfn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;apply str &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;%02x&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;                  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;doto &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;MessageDigest/getInstance&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;SHA-1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;                        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.update&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.getBytes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;String.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;                      &lt;span class=&quot;nv&quot;&gt;.digest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;tree-construction&quot;&gt;Tree Construction&lt;/h4&gt;
&lt;p&gt;The approach of this implementation is to, first, create a full binary tree,
then stick the hashes from the data blocks into the leaf nodes. Finally, compute
hashes all the up to the root.&lt;/p&gt;

&lt;p&gt;A quick note about the tree representation. I choose to use a linked list
approach, where each node has a reference to its right and left subtrees.
Another approach is to use an array to represent that tree. In my
implementation, Every node in the tree is a dictionary like the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;node &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:left&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:right&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:hashval&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:height&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here is a more detail rundown of the implementation. Given a list of hashes, my
implementation will construct a full binary tree with sufficient height such
that the hashes in the hash list can be filled into leaf nodes. The unfilled
leaf nodes will be filled with empty strings. The implementation recursively
constructs the tree from top to bottom in a depth-first fashion. The hash value
for a node is set after both its children are constructed. As it recurses down
to a leaf node, it will grab a hash from the given hash list. The updated
hash list is returned when it unwinds from the recursion.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;merkle-tree&lt;/span&gt;
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hashes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Math/ceil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;log2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;count &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hashes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))]&lt;/span&gt;
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;first &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;merkle-tree&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hashes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hashes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;a name=&quot;line-6&quot;&gt;&lt;/a&gt;   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;&amp;lt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;a name=&quot;line-7&quot;&gt;&lt;/a&gt;     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hashes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;a name=&quot;line-8&quot;&gt;&lt;/a&gt;     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;left-tree&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;new-hashes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;merkle-tree&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dec &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hashes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;a name=&quot;line-9&quot;&gt;&lt;/a&gt;           &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;right-tree&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;new-hashes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;merkle-tree&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dec &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;new-hashes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;a name=&quot;line-10&quot;&gt;&lt;/a&gt;           &lt;span class=&quot;c1&quot;&gt;;; create a new node&lt;/span&gt;
&lt;a name=&quot;line-11&quot;&gt;&lt;/a&gt;           &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:left&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:right&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:hashval&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:height&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;a name=&quot;line-12&quot;&gt;&lt;/a&gt;                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;assoc &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:left&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;left-tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;a name=&quot;line-13&quot;&gt;&lt;/a&gt;                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;assoc &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:right&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;right-tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;
&lt;a name=&quot;line-14&quot;&gt;&lt;/a&gt;       &lt;span class=&quot;c1&quot;&gt;;; update hashval of current node&lt;/span&gt;
&lt;a name=&quot;line-15&quot;&gt;&lt;/a&gt;       &lt;span class=&quot;c1&quot;&gt;;; if it is a leaf node, take a hash from hash list. Otherwise,&lt;/span&gt;
&lt;a name=&quot;line-16&quot;&gt;&lt;/a&gt;       &lt;span class=&quot;c1&quot;&gt;;; hash the concatenation of its children&amp;#39;s hashes.&lt;/span&gt;
&lt;a name=&quot;line-17&quot;&gt;&lt;/a&gt;       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;a name=&quot;line-18&quot;&gt;&lt;/a&gt;         &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;assoc &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:hashval&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hashfn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:hashval&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;left-tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;a name=&quot;line-19&quot;&gt;&lt;/a&gt;                                         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:hashval&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;right-tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;a name=&quot;line-20&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;nv&quot;&gt;new-hashes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;a name=&quot;line-21&quot;&gt;&lt;/a&gt;         &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;assoc &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:hashval&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;first &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;new-hashes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;drop &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;new-hashes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;usage&quot;&gt;Usage&lt;/h4&gt;
&lt;p&gt;Let’s define two helper functions, &lt;code&gt;random-bytes&lt;/code&gt;, and &lt;code&gt;create-hash-list&lt;/code&gt;. These
functions help making a list of hashes easily.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;random-bytes&lt;/span&gt;
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;random-bytes&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SecureRandom.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;             &lt;span class=&quot;nv&quot;&gt;rand-bytes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;byte-array&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;do&lt;/span&gt;
&lt;a name=&quot;line-6&quot;&gt;&lt;/a&gt;           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.nextBytes&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rand-bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;a name=&quot;line-7&quot;&gt;&lt;/a&gt;           &lt;span class=&quot;nv&quot;&gt;rand-bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;a name=&quot;line-8&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;line-9&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;create-hash-list&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;a name=&quot;line-10&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hashfn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;take &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;repeatedly&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;random-bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now you can construct a Merkle tree based on a list of hashes, and get its top
hash.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nv&quot;&gt;user=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:hashval&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;merkle-tree&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create-hash-list&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;f80ca0da9657a67cc7767ba3aa64658715b5b69f&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;There is a main drawback with this implementation. Since the implementation is
using recursion, if the given hash list is very long, the &lt;code&gt;merkle-tree&lt;/code&gt; function
will blow the stack. All in all, Merkle Tree is a really neat data structure
that has many applications, especially in the space of peer-to-peer networks.&lt;/p&gt;
</description>
        <pubDate>Sat, 01 Feb 2014 00:00:00 -0500</pubDate>
        <link>http://www.marcoyuen.com/articles/2014/02/01/merkle-tree.html</link>
        <guid isPermaLink="true">http://www.marcoyuen.com/articles/2014/02/01/merkle-tree.html</guid>
        
        <category>data structures</category>
        
        <category>clojure</category>
        
        
        <category>articles</category>
        
      </item>
    
      <item>
        <title>Hello Jekyll. Bye Tumblr.</title>
        <description>&lt;p&gt;After a year or so of neglect, I finally decided to rebuild my own web site.
This time around, the new design is more “blog”-centric. To generate this
website, I choose to use &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;, and ditch Tumblr. I
will slowly migrate some of my old blog posts from Tumblr to here.&lt;/p&gt;

&lt;p&gt;I think Tumblr was a great platform, but I was getting tired of using the web
based editor. Every time I used the web editor, I felt so foregin and
cumbersome.  My editor of choice, of course, is &lt;a href=&quot;http://www.vim.org&quot;&gt;Vim&lt;/a&gt;. Using
a static site generator like &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;, I can use my
favourite editor, and markdown to create my posts. The look and feel of the blog
is consistent to rest of the site as well.&lt;/p&gt;
</description>
        <pubDate>Sun, 26 Jan 2014 00:00:00 -0500</pubDate>
        <link>http://www.marcoyuen.com/general/2014/01/26/first-post.html</link>
        <guid isPermaLink="true">http://www.marcoyuen.com/general/2014/01/26/first-post.html</guid>
        
        <category>announcement</category>
        
        
        <category>general</category>
        
      </item>
    
  </channel>
</rss>
